const request = require('request');
const RESPONSE_MESSAGE = require('../config/response-messages')
var querystring = require('querystring');

async function createCheckoutId(data, payload) {

    return new Promise((resolve, reject) => {
        let registrations = {}
        let randomNumber = Math.random().toString(36).slice(2)
        var entityId = process.env.EntityId_SAR_3DSecure;
        var accessToken = process.env.Token;
        var paymentUrl = process.env.PAYMENT_URL;
        if(process.env.IS_PAYMENT_LIVE=="1"){
            entityId = process.env.LIVE_EntityId_SAR_3DSecure;
            accessToken = process.env.LIVE_Token;
            paymentUrl = process.env.LIVE_PAYMENT_URL;
        }
        var formdata = {
            "entityId": entityId,
            "amount": payload.amount,
            "currency": payload.currency,
            "customer.email": data.email ? data.email : "chairman@csfhealth.com",
            "merchantTransactionId":randomNumber,
        }
        if(process.env.IS_PAYMENT_LIVE=="1"){
            formdata = {
                "entityId": entityId,
                "amount": payload.amount,
                "currency": payload.currency,
                //"customer.email":"chairman@csfhealth.com",
                "merchantTransactionId":randomNumber,
                "customer.email":data.email ? data.email : "accountant@csfhealth.com",
                "billing.street1":"7788 King Abdulaziz RD - Al Yasmeen Dist.",
                "billing.city":"Riyadh",
                "billing.state":"Riyadh",
                "billing.country":"SA",
                "billing.postcode":"13325",
                "customer.givenName":"Bassam",
                "customer.surname":"ALOTAIBI",
            }
        }
        if(payload.recurringType == "INITIAL"){
            formdata.paymentType = "PA";
            if(process.env.IS_PAYMENT_LIVE=="0"){
                formdata.testMode = "EXTERNAL"
            }
        }else/* if(payload.recurringType == "REPEATED"){
            formdata.paymentType = "PA";
        }else*/{
            formdata.paymentType = "DB";
        }
        if(payload.createRegistration == true){
            formdata.createRegistration = true;
        }

        console.log("formdata ====== ",formdata)

        if(data && data.paymentRegistrationIds && data.paymentRegistrationIds.length > 0){
            var i = 0;
            for(let x of data.paymentRegistrationIds){
                formdata["registrations["+i+"].id"] = x;
                i++;
            }
        }
        console.log("***********************")
        console.log("payload ====== ",payload)
        console.log("formdata ====== ",formdata)
        console.log("************************")
        var options = {
            method: 'POST',
            url: paymentUrl + process.env.BASIC_PATH_CHECKOUT,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                //'Content-Length': formdata.length,
                //Authorization: 'Bearer OGE4Mjk0MTc0YjdlY2IyODAxNGI5Njk5MjIwMDE1Y2N8c3k2S0pzVDg='// + process.env.Token
                Authorization: 'Bearer ' + accessToken
            },
            form: formdata/*{
                entityId: process.env.EntityId, //below are the entityIds generated by the payment method developers, we have to use an id as per the requirement, these are 4 examples there can be more cases and for that we can as developers to create entityIds
                registrations[0].id:'8ac7a4a26eb1483c016eb1d48e671ab6',*/
                
                /*
                    8ac7a4c76cbd1171016cc8937850112b (For USD & 3D Secure)
                    8ac7a4ca6e1632fb016e17b2cb4e0d77 (For USD & Recurring)
                    8ac7a4ca6e1632fb016e17b6e9d30d87 (For SAR & 3D Secure)
                    8ac7a4ca6e1632fb016e17b964b40dc8 (For SAR & Recurring)
                */
                /*amount: data.amount, 
                currency: process.env.Currency, //currency code - USD/SAR/etc
                paymentType: process.env.PaymentType, //DB - this is fixed value 
                testMode: process.env.TestMode, //EXTERNAL
                merchantTransactionId: '1112', // orderId- unique id related to a particular booking or order*/

            //}
        };
        request(options, function (error, response, body) {

        console.log("******************",body,"------------------",error)
            if (error) {
                console.log(" ************** ERROR COMING ***************");
                if (error.code === 'ETIMEDOUT' && e.connect === true) {
                    console.log("*****************Timeout*****************");
                    reject(RESPONSE_MESSAGE.STATUS_MSG.ERROR.PAYMENT_ERROR);
                }
                else {
                    reject(RESPONSE_MESSAGE.STATUS_MSG.ERROR.PAYMENT_ERROR);
                }
            }
            else {
                resolve(body);
            };
        });
    });
}

async function checkPaymentStatus(data) {

    return new Promise((resolve, reject) => {

        var entityId = process.env.EntityId_SAR_3DSecure;
        var accessToken = process.env.Token;
        var paymentUrl = process.env.PAYMENT_URL;
        if(process.env.IS_PAYMENT_LIVE=="1"){
            entityId = process.env.LIVE_EntityId_SAR_3DSecure;
            accessToken = process.env.LIVE_Token;
            paymentUrl = process.env.LIVE_PAYMENT_URL;
        }

        let finalUrl = paymentUrl + process.env.BASIC_PATH_PAYMENT_STATUS + data.checkoutId+ "/payment";

        var options = {
            method: 'GET',
            url: finalUrl,
            qs: {
                entityId: entityId
            },
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                //Authorization: 'Bearer OGE4Mjk0MTc0YjdlY2IyODAxNGI5Njk5MjIwMDE1Y2N8c3k2S0pzVDg='// + process.env.Token
                'Authorization': 'Bearer ' + accessToken
            }
        };
        request(options, function (error, response, body) {
            if (error) {
                console.log(" ************** ERROR COMING ***************");
                if (error.code === 'ETIMEDOUT' && e.connect === true) {
                    console.log("*****************Timeout*****************");
                    reject(RESPONSE_MESSAGE.STATUS_MSG.ERROR.PAYMENT_ERROR);
                }
                else {
                    reject(RESPONSE_MESSAGE.STATUS_MSG.ERROR.PAYMENT_ERROR);
                }
            }
            else {
                resolve(body);
            };
        });
    });
}



function rebillPayment(data) {
    return new Promise((resolve, reject) => {



        var entityId = process.env.EntityId_SAR_3DSecure;
        var MotoentityId = process.env.EntityId_SAR_RECC_MOTO;
        var accessToken = process.env.Token;
        var paymentUrl = process.env.PAYMENT_URL;
        if(process.env.IS_PAYMENT_LIVE=="1"){
            entityId = process.env.LIVE_EntityId_SAR_3DSecure;
            MotoentityId = process.env.LIVE_EntityId_SAR_RECC_MOTO;
            accessToken = process.env.LIVE_Token;
            paymentUrl = process.env.LIVE_PAYMENT_URL;
        }

        let paymentData = {
            //'entityId':(data.isRecurring == "0") ? process.env.EntityId_SAR_3DSecure : process.env.EntityId_SAR_RECC_MOTO,
            'amount':data.amount,
            'currency':data.currency,//"EUR",//process.env.Currency,
            'paymentType':'CP'/*,
            'testMode':'EXTERNAL'*/
        }
        if(data.isRecurring == "0"){
            paymentData.entityId = entityId
            if(process.env.IS_PAYMENT_LIVE=="0"){
                paymentData.testMode = "EXTERNAL"
            }
        }else{
            paymentData.entityId = MotoentityId

        }

        var options = {
            method: 'POST',
            url: paymentUrl + process.env.PATH_PAYMENT + "/"+data.transactionId,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                //'Authorization': 'Bearer OGE4Mjk0MTc0YjdlY2IyODAxNGI5Njk5MjIwMDE1Y2N8c3k2S0pzVDg='// + process.env.Token
                'Authorization': 'Bearer ' + accessToken
            },
            form: paymentData
        };
        request(options, function (error, response, body) {
            if (error) {
                if (error.code === 'ETIMEDOUT' && e.connect === true) {
                    reject(RESPONSE_MESSAGE.STATUS_MSG.ERROR.PAYMENT_ERROR);
                }
                else {
                    reject(RESPONSE_MESSAGE.STATUS_MSG.ERROR.PAYMENT_ERROR);
                }
            }
            else {
                resolve(body);
            };
        });
    });
}

function RecurringPayment(data) {
    return new Promise((resolve, reject) => {



        //var entityId = process.env.EntityId_SAR_3DSecure;
        var MotoentityId = process.env.EntityId_SAR_RECC_MOTO;
        var accessToken = process.env.Token;
        var paymentUrl = process.env.PAYMENT_URL;
        if(process.env.IS_PAYMENT_LIVE=="1"){
            //entityId = process.env.LIVE_EntityId_SAR_3DSecure;
            MotoentityId = process.env.LIVE_EntityId_SAR_RECC_MOTO;
            accessToken = process.env.LIVE_Token;
            paymentUrl = process.env.LIVE_PAYMENT_URL;
        }


        let randomNumber = Math.random().toString(36).slice(2)
        let paymentData = {
            'entityId':MotoentityId,
            'amount':data.amount,
            'currency':data.currency,//"EUR",//process.env.Currency,
            'paymentType':'PA',
            //'testMode':'EXTERNAL',
            'merchantTransactionId': randomNumber, // orderId- unique id related to a particular booking or order
            'recurringType':'REPEATED'
        }

        var options = {
            method: 'POST',
            url: paymentUrl + process.env.RECURRING_PATH_PAYMENT_FIRST+data.registrationId+process.env.RECURRING_PATH_PAYMENT_SECOND,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                //'Authorization': 'Bearer OGE4Mjk0MTc0YjdlY2IyODAxNGI5Njk5MjIwMDE1Y2N8c3k2S0pzVDg='// + process.env.Token
                'Authorization': 'Bearer ' + accessToken
            },
            form: paymentData
        };
        request(options, function (error, response, body) {
            if (error) {
                if (error.code === 'ETIMEDOUT' && e.connect === true) {
                    reject(RESPONSE_MESSAGE.STATUS_MSG.ERROR.PAYMENT_ERROR);
                }
                else {
                    reject(RESPONSE_MESSAGE.STATUS_MSG.ERROR.PAYMENT_ERROR);
                }
            }
            else {
                resolve(body);
            };
        });
    });
}

async function removeCard(data) {
    console.log("4444444444444555555555555555555556666666666666666666666666666")
    return new Promise((resolve, reject) => {


        var entityId = process.env.EntityId_SAR_3DSecure;
        //var MotoentityId = process.env.EntityId_SAR_RECC_MOTO;
        var accessToken = process.env.Token;
        var paymentUrl = process.env.PAYMENT_URL;
        if(process.env.IS_PAYMENT_LIVE=="1"){
            entityId = process.env.LIVE_EntityId_SAR_3DSecure;
            //MotoentityId = process.env.LIVE_EntityId_SAR_RECC_MOTO;
            accessToken = process.env.LIVE_Token;
            paymentUrl = process.env.LIVE_PAYMENT_URL;
        }

        let finalUrl = paymentUrl + "/v1/registrations/"+data.registrationId+"?testMode=EXTERNAL&entityId="+entityId;

        var options = {
            method: 'DELETE',
            url: finalUrl,
            /*qs: {
                entityId: process.env.EntityId_SAR_3DSecure
            },*/
            headers: {
                //'Content-Type': 'application/x-www-form-urlencoded',
                //Authorization: 'Bearer OGE4Mjk0MTc0YjdlY2IyODAxNGI5Njk5MjIwMDE1Y2N8c3k2S0pzVDg='// + process.env.Token
                'Authorization': 'Bearer ' + accessToken
            }
        };
        request(options, function (error, response, body) {
            if (error) {
                console.log(" ************** ERROR COMING ***************");
                if (error.code === 'ETIMEDOUT' && e.connect === true) {
                    console.log("*****************Timeout*****************");
                    reject(RESPONSE_MESSAGE.STATUS_MSG.ERROR.PAYMENT_ERROR);
                }
                else {
                    reject(RESPONSE_MESSAGE.STATUS_MSG.ERROR.PAYMENT_ERROR);
                }
            }
            else {
                console.log("body -- ",body)
                resolve(body);
            };
        });
    });
}




































function makePayment(data) {
    return new Promise((resolve, reject) => {


        var entityId = process.env.EntityId_SAR_3DSecure;
        //var MotoentityId = process.env.EntityId_SAR_RECC_MOTO;
        var accessToken = process.env.Token;
        var paymentUrl = process.env.PAYMENT_URL;
        if(process.env.IS_PAYMENT_LIVE=="1"){
            entityId = process.env.LIVE_EntityId_SAR_3DSecure;
            //MotoentityId = process.env.LIVE_EntityId_SAR_RECC_MOTO;
            accessToken = process.env.LIVE_Token;
            paymentUrl = process.env.LIVE_PAYMENT_URL;
        }

        let randomNumber = Math.random().toString(36).slice(2)
        var options = {
            method: 'POST',
            url: paymentUrl + process.env.PATH_PAYMENT,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Authorization': 'Bearer ' + accessToken
            },
            form: {
                'entityId':entityId,
                //entityId:process.env.EntityId_SAR_3DSecure,
                amount:data.amount,
                currency:process.env.Currency,//"EUR",
                'paymentBrand':'VISA',
                'paymentType':'DB',
                'card.number':'4200000000000000',
                'card.holder':'Jane Jones',
                'card.expiryMonth':'05',
                'card.expiryYear':'2020',
                'card.cvv':'123',
                'recurringType':'INITIAL',
                'createRegistration':'true',
                merchantTransactionId: randomNumber, // orderId- unique id related to a particular booking or order
                /*entityId:process.env.EntityId,
                amount:data.amount,
                currency:process.env.Currency,
                testMode: process.env.TestMode, //EXTERNAL
                paymentBrand:'VISA',
                paymentType:'DB',
                "card.number":'4200000000000000',
                "card.holder":'Jane Jones',
                "card.expiryMonth":'05',
                "card.expiryYear":'2020',
                "card.cvv":'123',
                'shopperResultUrl':'https://hyperpay.docs.oppwa.com/tutorials/server-to-server'*/
            }
        };
        request(options, function (error, response, body) {
            if (error) {
                console.log(" ************** ERROR COMING ***************");
                if (error.code === 'ETIMEDOUT' && e.connect === true) {
                    console.log("*****************Timeout*****************");
                    reject(RESPONSE_MESSAGE.STATUS_MSG.ERROR.PAYMENT_ERROR);
                }
                else {
                    reject(RESPONSE_MESSAGE.STATUS_MSG.ERROR.PAYMENT_ERROR);
                }
            }
            else {
                console.log(body)
                resolve(body);
            };
        });
    });
    /*postRequest.write(data);
    postRequest.end();*/
}


async function transactionSearchByMerchantTransactionId(data) {

    return new Promise((resolve, reject) => {

        let finalUrl = process.env.PAYMENT_URL + "/v1/query";

        var options = {
            method: 'GET',
            url: finalUrl,
            qs: {
                entityId: "8a8294174b7ecb28014b9699220015ca",//process.env.EntityId,
                merchantTransactionId : "4444"
            },
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                Authorization: 'Bearer OGE4Mjk0MTc0YjdlY2IyODAxNGI5Njk5MjIwMDE1Y2N8c3k2S0pzVDg='// + process.env.Token
            }
        };
        request(options, function (error, response, body) {
            if (error) {
                console.log(" ************** ERROR COMING ***************");
                if (error.code === 'ETIMEDOUT' && e.connect === true) {
                    console.log("*****************Timeout*****************");
                    reject(RESPONSE_MESSAGE.STATUS_MSG.ERROR.PAYMENT_ERROR);
                }
                else {
                    reject(RESPONSE_MESSAGE.STATUS_MSG.ERROR.PAYMENT_ERROR);
                }
            }
            else {
                resolve(body);
            };
        });
    });
}


function InitialPayment(data) {
    return new Promise((resolve, reject) => {
        let randomNumber = Math.random().toString(36).slice(2)
        let paymentData
        if(data.recurringType  && data.recurringType == "INITIAL"){
            paymentData = {
                'entityId':'8a8294174b7ecb28014b9699220015ca',//process.env.EntityId_SAR_3DSecure,
                amount:data.amount,
                currency:data.currency,//"EUR",//process.env.Currency,
                'paymentBrand':data.paymentBrand,//'VISA',
                'paymentType':'PA',
                'card.number':data.cardNumber,//'4200000000000000',
                'card.holder':data.cardHolderName,//'Jane Jones',
                'card.expiryMonth':data.expiryMonth,//'05',
                'card.expiryYear':data.expiryYear,//'2020',
                'card.cvv':data.cvv,//'123', 
                'recurringType':'INITIAL',                
                merchantTransactionId: randomNumber // orderId- unique id related to a particular booking or order
            }
        }else{
            paymentData = {
                'entityId':'8a8294174b7ecb28014b9699220015ca',//process.env.EntityId_SAR_3DSecure,
                amount:data.amount,
                currency:data.currency,//"EUR",//process.env.Currency,
                'paymentBrand':data.paymentBrand,//'VISA',
                'paymentType':'DB',
                'card.number':data.cardNumber,//'4200000000000000',
                'card.holder':data.cardHolderName,//'Jane Jones',
                'card.expiryMonth':data.expiryMonth,//'05',
                'card.expiryYear':data.expiryYear,//'2020',
                'card.cvv':data.cvv,//'123', 
                merchantTransactionId: randomNumber // orderId- unique id related to a particular booking or order
            }
        }
        if(data.createRegistration && data.createRegistration == "true"){
            paymentData.createRegistration = true;
        }

        var options = {
            method: 'POST',
            url: process.env.PAYMENT_URL + process.env.PATH_PAYMENT,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Authorization': 'Bearer OGE4Mjk0MTc0YjdlY2IyODAxNGI5Njk5MjIwMDE1Y2N8c3k2S0pzVDg='// + process.env.Token
            },
            form: paymentData
        };
        request(options, function (error, response, body) {
            if (error) {
                if (error.code === 'ETIMEDOUT' && e.connect === true) {
                    reject(RESPONSE_MESSAGE.STATUS_MSG.ERROR.PAYMENT_ERROR);
                }
                else {
                    reject(RESPONSE_MESSAGE.STATUS_MSG.ERROR.PAYMENT_ERROR);
                }
            }
            else {
                resolve(body);
            };
        });
    });
}



module.exports = {
    createCheckoutId: createCheckoutId,
    makePayment: makePayment,
    InitialPayment: InitialPayment,
    rebillPayment:rebillPayment,
    RecurringPayment: RecurringPayment,
    removeCard: removeCard,
    transactionSearchByMerchantTransactionId: transactionSearchByMerchantTransactionId,
    checkPaymentStatus: checkPaymentStatus
}
